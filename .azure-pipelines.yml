#--------------------------------------------------------------------------------------------------
# Windows
#--------------------------------------------------------------------------------------------------

jobs:
#- job: win32
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh generate.sh win32 build
#      7z a 3rdparty.zip win32
#  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#    artifact: 3rdparty-win32

#- job: win64
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh generate.sh win64 build
#      7z a 3rdparty.zip win64
#  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#    artifact: 3rdparty-win64

#- job: win32_msvc
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh environment.sh msvc
#      sh generate.sh win32 build
#      7z a 3rdparty.zip win32
#  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#    artifact: 3rdparty-win32-msvc

#- job: win64_msvc
#  pool:
#    vmImage: "windows-latest"
#  steps:
#  - bash: |
#      sh environment.sh msvc
#      sh generate.sh win64 build
#      7z a 3rdparty.zip win64
#  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#    artifact: 3rdparty-win64-msvc

##--------------------------------------------------------------------------------------------------
## macOS
##--------------------------------------------------------------------------------------------------

#- job: macOS
#  pool:
#    vmImage: "macOS-latest"
#  steps:
#  - bash: |
#      sh generate.sh macOS build
#      zip -rq 3rdparty.zip macOS
#  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#    artifact: 3rdparty-macOS

#--------------------------------------------------------------------------------------------------
# Linux
#--------------------------------------------------------------------------------------------------
# NOTE: Docker requires 'DEBIAN_FRONTEND=noninteractive' to avoid getting prompted.

- job: linux32
  pool:
    vmImage: "ubuntu-latest"
  steps:
  - bash: |
      docker run -d --name ubuntu -v $PWD:/3rdparty i386/ubuntu:20.04 tail -f /dev/null
      docker exec -t ubuntu bash -c "cd /3rdparty;
                                     apt-get update;
                                     DEBIAN_FRONTEND=noninteractive apt-get -y install tzdata sudo curl zip;
                                     apt-get -y install packagekit software-properties-common;
                                     zip -rq 3rdparty.zip linux"
  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
    artifact: 3rdparty-linux32

#- job: linux64
#  pool:
#    vmImage: "ubuntu-latest"
#  steps:
#  - bash: |
#      docker run -d --name ubuntu -v $PWD:/3rdparty amd64/ubuntu:20.04 tail -f /dev/null
#      docker exec -t ubuntu bash -c "cd /3rdparty;
#                                     export DEBIAN_FRONTEND=noninteractive;
#                                     apt-get update;
#                                     apt-get -y install sudo curl zip;
#                                     sh generate.sh linux build;
#                                     zip -rq 3rdparty.zip linux"
#  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#    artifact: 3rdparty-linux64

##--------------------------------------------------------------------------------------------------
## Android
##--------------------------------------------------------------------------------------------------

#- job: android
#  pool:
#    vmImage: "ubuntu-latest"
#  steps:
#  - bash: |
#      docker run -d --name ubuntu -v $PWD:/3rdparty amd64/ubuntu:20.04 tail -f /dev/null
#      docker exec -t ubuntu bash -c "cd /3rdparty;
#                                     apt-get update;
#                                     apt-get -y install sudo curl zip unzip git;
#                                     sh generate.sh android build;
#                                     zip -rqy 3rdparty.zip android"
#  - publish: $(System.DefaultWorkingDirectory)/3rdparty.zip
#    artifact: 3rdparty-android
